> /tmp/ipykernel_224468/4294714902.py(125)prediction_step()
    123                     loss = loss.mean().detach()
    124                     import pdb;pdb.set_trace()
--> 125                     if isinstance(outputs, dict):
    126                         logits = tuple(v for k, v in outputs.items() if k not in ignore_keys + ["loss"])
    127                     else:
tensor([[[[[-41.2500, -41.6250,  -8.5938,  ..., -26.1875, -37.1250,
            -21.8281],
           [-46.0938, -45.8750,  -8.2344,  ..., -31.6875, -45.0312,
            -28.9219],
           [-42.5938, -42.0000,  -8.4531,  ..., -25.5781, -36.9688,
            -24.3750],
           ...,
           [-29.7656, -28.5469,   0.4048,  ..., -20.3750, -25.2188,
            -21.0312],
           [-29.9062, -28.7188,   0.4863,  ..., -20.3438, -25.3750,
            -21.4375],
           [-29.8750, -28.8594,   0.8506,  ..., -20.5469, -25.6875,
            -21.2188]],
          [[-41.2500, -41.6250,  -8.5938,  ..., -26.1875, -37.1250,
            -21.8281],
           [-46.0938, -45.8750,  -8.2344,  ..., -31.6875, -45.0312,
            -28.9219],
           [-42.5938, -42.0000,  -8.4531,  ..., -25.5781, -36.9688,
            -24.3750],
           ...,
           [-35.1875, -37.1875,   3.7129,  ..., -25.7500, -22.5781,
            -24.0625],
           [-35.0625, -37.4062,   3.1699,  ..., -25.7812, -22.7656,
            -24.5938],
           [-35.1562, -37.4688,   3.5566,  ..., -25.8594, -21.8125,
            -24.4062]],
          [[-41.2500, -41.6250,  -8.5938,  ..., -26.1875, -37.1250,
            -21.8281],
           [-46.0938, -45.8750,  -8.2344,  ..., -31.6875, -45.0312,
            -28.9219],
           [-42.5938, -42.0000,  -8.4531,  ..., -25.5781, -36.9688,
            -24.3750],
           ...,
           [-33.4062, -37.1562,  -2.9277,  ..., -25.1406, -21.5781,
            -26.0312],
           [-35.0000, -38.0938,  -0.6074,  ..., -24.8438, -24.0156,
            -25.0312],
           [-32.3750, -36.0000,  -3.3418,  ..., -24.7656, -22.5781,
            -21.7344]],
          [[-41.2500, -41.6250,  -8.5938,  ..., -26.1875, -37.1250,
            -21.8281],
           [-46.0938, -45.8750,  -8.2344,  ..., -31.6875, -45.0312,
            -28.9219],
           [-42.5938, -42.0000,  -8.4531,  ..., -25.5781, -36.9688,
            -24.3750],
           ...,
           [-43.1562, -44.6250,   0.1179,  ..., -31.8906, -30.5312,
            -30.7031],
           [-42.6250, -43.5312,   1.9717,  ..., -32.5625, -29.5781,
            -31.2500],
           [-39.6562, -41.7500,  -1.7344,  ..., -32.2188, -26.8750,
            -29.0781]]]]], device='cuda:0')
torch.Size([1, 1, 4, 1020, 32000])
tensor(22.7485, device='cuda:0')
False
tensor([], device='cuda:0', size=(0, 1, 4, 1020, 32000))
tensor([[[[[-41.2500, -41.6250,  -8.5938,  ..., -26.1875, -37.1250,
            -21.8281],
           [-46.0938, -45.8750,  -8.2344,  ..., -31.6875, -45.0312,
            -28.9219],
           [-42.5938, -42.0000,  -8.4531,  ..., -25.5781, -36.9688,
            -24.3750],
           ...,
           [-29.7656, -28.5469,   0.4048,  ..., -20.3750, -25.2188,
            -21.0312],
           [-29.9062, -28.7188,   0.4863,  ..., -20.3438, -25.3750,
            -21.4375],
           [-29.8750, -28.8594,   0.8506,  ..., -20.5469, -25.6875,
            -21.2188]],
          [[-41.2500, -41.6250,  -8.5938,  ..., -26.1875, -37.1250,
            -21.8281],
           [-46.0938, -45.8750,  -8.2344,  ..., -31.6875, -45.0312,
            -28.9219],
           [-42.5938, -42.0000,  -8.4531,  ..., -25.5781, -36.9688,
            -24.3750],
           ...,
           [-35.1875, -37.1875,   3.7129,  ..., -25.7500, -22.5781,
            -24.0625],
           [-35.0625, -37.4062,   3.1699,  ..., -25.7812, -22.7656,
            -24.5938],
           [-35.1562, -37.4688,   3.5566,  ..., -25.8594, -21.8125,
            -24.4062]],
          [[-41.2500, -41.6250,  -8.5938,  ..., -26.1875, -37.1250,
            -21.8281],
           [-46.0938, -45.8750,  -8.2344,  ..., -31.6875, -45.0312,
            -28.9219],
           [-42.5938, -42.0000,  -8.4531,  ..., -25.5781, -36.9688,
            -24.3750],
           ...,
           [-33.4062, -37.1562,  -2.9277,  ..., -25.1406, -21.5781,
            -26.0312],
           [-35.0000, -38.0938,  -0.6074,  ..., -24.8438, -24.0156,
            -25.0312],
           [-32.3750, -36.0000,  -3.3418,  ..., -24.7656, -22.5781,
            -21.7344]],
          [[-41.2500, -41.6250,  -8.5938,  ..., -26.1875, -37.1250,
            -21.8281],
           [-46.0938, -45.8750,  -8.2344,  ..., -31.6875, -45.0312,
            -28.9219],
           [-42.5938, -42.0000,  -8.4531,  ..., -25.5781, -36.9688,
            -24.3750],
           ...,
           [-43.1562, -44.6250,   0.1179,  ..., -31.8906, -30.5312,
            -30.7031],
           [-42.6250, -43.5312,   1.9717,  ..., -32.5625, -29.5781,
            -31.2500],
           [-39.6562, -41.7500,  -1.7344,  ..., -32.2188, -26.8750,
            -29.0781]]]]], device='cuda:0')
torch.Size([0, 1, 4, 1020, 32000])
torch.Size([1, 1, 4, 1020, 32000])
--KeyboardInterrupt--
KeyboardInterrupt: Interrupted by user
> /tmp/ipykernel_224468/4294714902.py(149)prediction_step()
    147             logits = logits[0]
    148         import pdb;pdb.set_trace()
--> 149         return (loss, logits, labels)
    150     def compute_loss(self, model, inputs, return_outputs=False):
